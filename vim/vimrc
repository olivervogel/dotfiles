"no arrow key
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

set encoding=utf-8

"set ruler at columns
set colorcolumn=80,120
highlight ColorColumn ctermbg=0 guibg=236 ctermbg=236

"hightlight current line
set cursorline

"define ctrl-s to explore via nerdtree
nnoremap <C-s> :NERDTreeToggle<cr>

"define leader
let mapleader=","

" shortcut to open config files
nmap <Leader>rc :e ~/.dotfiles/vim/vimrc<cr>
nmap <Leader>pl :e ~/.dotfiles/nvim/vim-plug/plugins.vim<cr>

noremap <Leader>c :bd<cr>
noremap <Leader>w :w<cr>
noremap <Leader>n :enew<cr>
noremap <bs> daw

" alt+j (mac) to move line up
nnoremap º :m .+1<CR>==
nnoremap <A-j> :m .+1<CR>==

" alt+k (mac) to move line down
nnoremap ∆ :m .-2<CR>==
nnoremap <A-k> :m .-2<CR>==

" alt+o to add new line after adding semicolon to end of current line
nnoremap ø A;<cr>
nnoremap <A-o> A;<cr>
inoremap ø <esc>A;<cr>

" alt-shift+o add semicolon to end of current line
nnoremap Ø A;
nnoremap <A-O> A;
inoremap Ø <esc>A;

nnoremap n nzz
nnoremap N Nzz

"set cursor to line in insert mode and to block in normal mode
let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"

"cursor should change quickly
set ttimeout
set ttimeoutlen=1
set listchars=tab:>-,trail:~,extends:>,precedes:<,space:.
set ttyfast

"colors
:highlight MatchParen cterm=underline ctermbg=black ctermfg=NONE
:highlight Pmenu ctermbg=darkgray guibg=darkgray
:highlight PmenuSel ctermbg=gray guibg=gray ctermfg=0
highlight ALEWarning ctermbg=238

set clipboard+=unnamed
set number
set backspace=indent,eol,start

" autocompletion
set complete+=kspell,k
set completeopt=menu
set omnifunc=syntaxcomplete#Complete

" open auto comletion with <c-space>
let g:mucomplete#no_mappings=1
imap <unique> <c-space> <plug>(MUcompleteFwd)

" select with enter key when completion menu is open
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" cycle popup with c-space or j or k
inoremap <expr> j pumvisible() ? "\<c-n>" : "j"
inoremap <expr> k pumvisible() ? "\<c-p>" : "k"

"highlight search keywords
set hlsearch

"display keywords immedeately
set incsearch

"search will be case-sensitive if it contains an uppercase letter
set ignorecase
set smartcase

filetype indent plugin on
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set smartindent
set autoindent

" turn on indenting for php
autocmd FileType php setlocal smartindent autoindent indentexpr=""

" *.ss should be handled as html
au BufRead,BufNewFile *.ss set filetype=ss
autocmd BufNewFile,BufRead *.ss set syntax=html

" *.blade should be handled as html
au BufRead,BufNewFile *.blade.php set filetype=blade
autocmd BufNewFile,BufRead *.blade.php set syntax=html

syntax enable

set path+=**
set wildmenu

" relative/hybrid line numbers
set number relativenumber
set nu rnu

" macros
nnoremap <Leader>da F dt=xda"
nnoremap fit vito<esc>

"tab switching with leader<num>
noremap <Leader>1 1gt
noremap <Leader>2 2gt
noremap <Leader>3 3gt
noremap <Leader>4 4gt
noremap <Leader>5 5gt
noremap <Leader>6 6gt
noremap <Leader>7 7gt
noremap <Leader>8 8gt
noremap <Leader>9 9gt
noremap <Leader>0 :tabnew<cr>

" swtich buffers with tab & shift+tab
noremap <tab> :bnext<cr>
noremap <s-tab> :bprevious<cr>

" WINDOWS
" split window
nmap ss :split<Return><C-w>w
nmap sv :vsplit<Return><C-w>w
" move in windows
map sk <C-w>k
map sj <C-w>j

" next/prev window
noremap <c-l> <c-w>l
noremap <c-h> <c-w>h

" Select all
nmap <C-a> gg<S-v>G

" Increment/decrement
nnoremap + <C-a>
nnoremap - <C-x>

" phpactor keys
noremap <Leader>u :PhpactorImportClass<cr>
noremap <Leader>e :PhpactorClassExpand<cr>
noremap <Leader>o :PhpactorGotoDefinition<cr>
noremap <Leader>mm :PhpactorContextMenu<cr>

" snippet keys
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-c>"
let g:UltiSnipsSnippetDirectories=[$HOME.'/.dotfiles/vim/snippets']

" remaping for german keyboard
set langmap=^`,#',ö\\;,&^

" fzf settings
nnoremap <c-p> :FZF<cr>
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6, 'relative': v:true, 'yoffset': 0 } }

" ale settings
let g:ale_linters_explicit = 1
let g:ale_linters = {'php': ['phpcs']}
let g:ale_php_phpcs_standard = 'psr12'

" close nerdtree after opening file
let NERDTreeQuitOnOpen=1

" run phpunit in toggleterminal
nnoremap <Leader>tt :TermExec cmd="./vendor/bin/phpunit"<cr>

" show help in vertical split
augroup vimrc_help
  autocmd!
  autocmd BufEnter *.txt if &buftype == 'help' | wincmd L | endif
augroup END

" wrapper function to remap ]]
function! NextSection()
    try
        normal ]]zz
    catch
    endtry
endfunction

" wrapper function to remap [[
function! PrevSection()
    try
        normal [[zz
    catch
    endtry
endfunction

" remap [[ and ]]
map <c-j> :call NextSection()<cr>
map <c-k> :call PrevSection()<cr>
