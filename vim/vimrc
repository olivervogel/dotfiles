"no arrow key
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

set encoding=utf-8

set termguicolors

"define leader
let mapleader=" "

syntax enable

set path+=**
set wildmenu

" open splits below/right current buffer
set splitbelow
set splitright

" relative/hybrid line numbers
set number relativenumber
set nu rnu

" remaping for german keyboard
set langmap=^`,#',ö\\;,&^

" persist undo history
" set undofile

"set ruler at columns
set colorcolumn=80,120
highlight ColorColumn ctermbg=0 guibg=236 ctermbg=236

"hightlight current line
set cursorline

" scroll offset
set scrolloff=5

" swtich buffers with tab & shift+tab
noremap <tab> :bnext<cr>
noremap <s-tab> :bprevious<cr>

" next/prev window
noremap <c-l> <c-w>l
noremap <c-h> <c-w>h

" WW for saving file
noremap WW :update<cr>

" XX for closing buffer
noremap XX :bd<cr>

" shortcut to open config files
nmap <Leader>rc :e ~/.dotfiles/vim/vimrc<cr>
nmap <Leader>pl :e ~/.dotfiles/nvim/vim-plug/plugins.vim<cr>

" plugin install & clean
nmap <Leader>pi :PlugInstall<cr>
nmap <Leader>pc :PlugClean<cr>

" open & quite splits
nmap <Leader>ss :vsplit<cr><C-w>w
nmap <Leader>sq <c-w><c-q>

" open new buffer
noremap <Leader>n :enew<cr>

" html attribute pseude text object (experimental)
xnoremap ix a"oB
onoremap ix :<c-u>normal vix<cr>
xnoremap ax a"oBh
onoremap ax :<c-u>normal vax<cr>

" php stuff
noremap <Leader>u :PhpactorImportClass<cr>
noremap <Leader>e :PhpactorClassExpand<cr>
noremap <Leader>o :PhpactorGotoDefinition<cr>
noremap <Leader>mm :PhpactorContextMenu<cr>
nnoremap <Leader>i :PhpactorHover<cr>
nnoremap <Leader>tt :TermExec cmd="./vendor/bin/phpunit"<cr>

" Increment/decrement
nnoremap + <C-a>
nnoremap - <C-x>

" qq to record, Q to replay
nnoremap Q @q

" dehighlight searchterms
nnoremap ,<space> :nohlsearch<cr>

" keep visual mode active after indenting
vmap > >gv
vmap < <gv

" delete around word with backspace
noremap <bs> daw

"define ctrl-s to explore via nerdtree
nnoremap <C-s> :NERDTreeToggle<cr>

" alt+j (mac) to move line up
nnoremap º :m .+1<CR>==
nnoremap <A-j> :m .+1<CR>==

" alt+k (mac) to move line down
nnoremap ∆ :m .-2<CR>==
nnoremap <A-k> :m .-2<CR>==

" alt+o to add new line after adding semicolon to end of current line
nnoremap ø A;<cr><esc>
nnoremap <A-o> A;<cr><esc>
inoremap ø <esc>A;<cr><esc>

" alt-shift+o add semicolon to end of current line
nnoremap Ø A;<esc>
nnoremap <A-O> A;<esc>
inoremap Ø <esc>A;<esc>

" autocenter while jumping to search results
nnoremap n nzz
nnoremap N Nzz

"set cursor to line in insert mode and to block in normal mode
let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"

"cursor should change quickly
set ttimeout
set ttimeoutlen=1
set listchars=tab:>-,trail:~,extends:>,precedes:<,space:.
set ttyfast

"colors
highlight MatchParen cterm=underline ctermbg=black ctermfg=NONE
highlight Pmenu ctermbg=darkgray guibg=darkgray
highlight PmenuSel ctermbg=gray guibg=gray ctermfg=0
highlight ALEWarning ctermbg=238

set clipboard^=unnamed
set number
set backspace=indent,eol,start

" autocompletion
set complete+=kspell,k
set completeopt=noinsert,menuone
" set omnifunc=syntaxcomplete#Complete
set pumheight=10

"ncm settings
autocmd BufEnter * call ncm2#enable_for_buffer()
let g:ncm2#auto_popup = 0
inoremap <expr> <c-space> pumvisible() ? "\<c-n>" : "\<c-space>"
inoremap <c-space> <c-r>=ncm2#manual_trigger()<cr>
set shortmess+=c

" open auto comletion with <c-space>
" let g:mucomplete#no_mappings=1
" let g:mucomplete#chains = { 'default' : ['c-p', 'omni', 'path', 'keyn'] }
" imap <unique> <c-space> <plug>(MUcompleteFwd)

" map omni completion to ctrl-space
" imap <unique> <c-space> <c-x><c-o>

" select with enter key when completion menu is open
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" cycle popup with c-space or j or k
inoremap <expr> j pumvisible() ? "\<c-n>" : "j"
inoremap <expr> k pumvisible() ? "\<c-p>" : "k"

"highlight search keywords
set hlsearch

"display keywords immedeately
set incsearch

"search will be case-sensitive if it contains an uppercase letter
set ignorecase
set smartcase

filetype indent plugin on
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
" set smartindent
set autoindent
set copyindent

" turn on indenting for php
" autocmd FileType php setlocal smartindent autoindent indentexpr=""
" autocmd FileType php setlocal autoindent indentexpr=""

" lsp autocomplete
" autocmd FileType php set omnifunc=v:lua.vim.lsp.omnifunc

" *.ss should be handled as html
au BufRead,BufNewFile *.ss set filetype=ss
autocmd BufNewFile,BufRead *.ss set syntax=html

" *.vue should be handled as javascript
au BufRead,BufNewFile *.vue set filetype=javascript
autocmd BufNewFile,BufRead *.vue set syntax=javascript

" *.blade should be handled as html
au BufRead,BufNewFile *.blade.php set filetype=blade
autocmd BufNewFile,BufRead *.blade.php set syntax=html

" Select all
" nmap <C-a> gg<S-v>G

" snippet keys
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-c>"
let g:UltiSnipsSnippetDirectories=[$HOME.'/.dotfiles/vim/snippets']

" fzf settings
nnoremap <c-p> :FZF<cr>
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6, 'relative': v:true, 'yoffset': 0 } }

" ale settings
let g:ale_linters_explicit = 1
let g:ale_linters = {'php': ['phpcs']}
let g:ale_php_phpcs_standard = 'psr12'

" close nerdtree after opening file
let NERDTreeQuitOnOpen=1

" show help in vertical split
augroup vimrc_help
  autocmd!
  autocmd BufEnter *.txt if &buftype == 'help' | wincmd L | endif
augroup END

" wrapper function to remap ]]
function! NextSection()
    try
        normal ]]zz
    catch
    endtry
endfunction

" wrapper function to remap [[
function! PrevSection()
    try
        normal [[zz
    catch
    endtry
endfunction

" remap [[ and ]]
" nnoremap <c-j> <c-d>
" nnoremap <c-k> <c-u>

