snippet mod
defmodule ${1:MyModule} do
	@moduledoc false
	$0
end
endsnippet

snippet def
def ${1:my_function}(${2:args}) do
	$0
end
endsnippet

snippet def_
def ${1:my_function}(${2:args}), do: ${3:body}
endsnippet

snippet defp
defp ${1:my_function}(${2:args}) do
	$0
end
endsnippet

snippet defp_
defp ${1:my_function}(${2:args}), do: ${3:body}
endsnippet

snippet fn "" i
fn${1: ($2) -> $3 }end
endsnippet

snippet fnn "" i
&(${1:args})
endsnippet

snippet each
Enum.each(1..${1:count}, fn ${2:val} ->
	$0
end)
endsnippet

snippet if
if ${1:condition} do
	$0
end
endsnippet

snippet ifelse
if ${1:condition} do
	$2
else
	$0
end
endsnippet

snippet for
for ${1:item} <- ${2:items} do
	$0
end
endsnippet

snippet >> "" i
|> 
endsnippet

snippet map "" i
%$1{$2}
endsnippet

snippet => "" i
"$1" => "$2"
endsnippet

snippet test
test "${1:test something}" do
	${2:assert ${3:Example.something() == :result}}
end
endsnippet

snippet doc
@doc """
${1:Title}

## Parameters

	- name: Description of parameter.

## Examples

	iex> Example.code()
	:result

"""
endsnippet

snippet mdoc
@moduledoc """
${1:Title}
"""
endsnippet

snippet spec
@spec ${1:function_definition} :: ${2:return_type}
endsnippet

snippet ins
IO.inspect($1)
endsnippet

snippet render
def render(assigns) do
	~H"""
	$0
	"""
end
endsnippet


snippet renderv
def render(assigns) do
	Phoenix.View.render(${0:MyApp.MyView}, "index.html", assigns)
end
endsnippet

snippet case
case ${1:target} do
	$0
	_ -> result
end
endsnippet

snippet cond
cond do
	$0
	true -> result
end
endsnippet
