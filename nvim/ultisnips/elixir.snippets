extends html, eelixir

snippet mod
defmodule ${1:MyModule} do
	@moduledoc false
	$0
end
endsnippet

snippet def
def ${1:my_function}(${2:args}) do
	$0
end
endsnippet

snippet def,
def ${1:my_function}(${2:args}), do: ${3:body}
endsnippet

snippet defp
defp ${1:my_function}(${2:args}) do
	$0
end
endsnippet

snippet defp,
defp ${1:my_function}(${2:args}), do: ${3:body}
endsnippet

snippet fn "" i
fn${1: ($2) -> $3 }end
endsnippet

snippet fn, "" i
&(${1:args})
endsnippet

snippet each
Enum.each(1..${1:count}, fn ${2:val} ->
	$0
end)
endsnippet

snippet if
if ${1:condition} do
	$0
end
endsnippet

snippet ifelse
if ${1:condition} do
	$2
else
	$0
end
endsnippet

snippet for
for ${1:item} <- ${2:items} do
	$0
end
endsnippet

snippet >> "" i
|> 
endsnippet

snippet map "" i
%$1{$2}
endsnippet

snippet => "" i
"$1" => "$2"
endsnippet

snippet :: "" i
${1:attribute}: ${2:$1}
endsnippet

snippet test
test "${1:test something}" do
	${2:assert ${3:Example.something() == :result}}
end
endsnippet

snippet doc
@doc """
${1:Title}

## Parameters

	- name: Description of parameter.

## Examples

	iex> Example.code()
	:result

"""
endsnippet

snippet mdoc
@moduledoc """
${1:Title}
"""
endsnippet

snippet spec
@spec ${1:function_definition} :: ${2:return_type}
endsnippet

snippet ins
IO.inspect($0)
endsnippet

snippet case
case ${1:target} do
	$0
	_ -> result
end
endsnippet

snippet cond
cond do
	$0
	true -> result
end
endsnippet

snippet using
defmacro __using__(opts) do
	quote do
		$0
	end
end
endsnippet

snippet sig
~H"""
$0
"""
endsnippet

snippet sig,
~H"$0"
endsnippet

snippet lv "live view"
defmodule ${1:MyLiveView} do
	@moduledoc false

	use MyAppWeb, :live_view

	def mount(_params, _session, socket) do
		{:ok, socket}
	end

	def render(assigns) do
		~H"""
		"""
	end
end
endsnippet

snippet lc "live component"
defmodule ${1:MyComponent} do
	@moduledoc false

	use MyAppWeb, :live_component

	def mount(socket) do
		{:ok, socket}
	end

	def update(_assigns, socket) do
		{:ok, socket}
	end

	def render(assigns) do
		~H"""
		"""
	end
end
endsnippet

snippet send
send(self(), ${1:data})
endsnippet

# mount
snippet mount
def mount(_params, _session, socket) do
	{:ok, socket}
end
endsnippet

# handle event
snippet he
def handle_event("${1:name}", _params, socket) do
	{:noreply, socket}
end
endsnippet

# handle info
snippet hi
def handle_info("${1:name}", socket) do
	{:noreply, socket}
end
endsnippet

# handle params
snippet hp
def handle_params(params, _url, socket) do
	{:noreply, socket}
end
endsnippet

snippet ass
assign(socket, ${1:key}: ${2:$1})
endsnippet

snippet upd
assign(socket, ${1:key}: ${2:$1})
endsnippet

snippet send
send(self(), ${1:key}: ${2:value})
endsnippet

snippet render
def render(assigns) do
	~H"""
	$0
	"""
end
endsnippet

snippet renderv
def render(assigns) do
	Phoenix.View.render(${0:MyApp.MyView}, "index.html", assigns)
end
endsnippet

snippet pp
IO.inspect("-----------------------------------------------------------------")
IO.inspect($0)
IO.inspect("-----------------------------------------------------------------")
endsnippet

snippet qall
from(i in ${1:Item}) |> Repo.all()
endsnippet

snippet qone
from(i in ${1:Item}) |> Repo.one()
endsnippet


